generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type                     Role?        @default(BUSINESS)
  name                     String?      @db.VarChar
  emailAddress             String       @unique @db.VarChar
  password                 String       @db.VarChar
  countryId                String?      @db.Uuid
  brandTypeId              String?      @db.Uuid
  referralCode             String?      @db.VarChar
  userImage                String?      @db.VarChar
  applicationLink          String?      @db.VarChar
  description              String?      @db.VarChar
  contactPersonName        String?      @db.VarChar
  contactPersonPhoneNumber String?      @db.VarChar
  gstNumber                String?      @db.VarChar
  status                   Boolean?     @default(false)
  workEmail                String?      @db.VarChar
  socialMediaPlatform      String[]     @db.VarChar
  birthDate                DateTime?
  gender                   Gender?
  cityId                   String?      @db.Uuid
  stateId                  String?      @db.Uuid
  socialMediaLink          String?      @db.VarChar
  sampleWorkLink           String?      @db.VarChar
  aboutYou                 String?      @db.VarChar
  bio                      String?      @db.VarChar
  ratings                  Int? 
  influencerType           InfluencerType?
  loginType                LoginType?
  availability             AvailabilityType?
  viewCount                Int?         @default(0)
  profileCompletion        Int          @default(0)
  createsAt                DateTime?    @default(now()) @db.Timestamp(6)
  updatedAt                DateTime?    @default(now()) @updatedAt @db.Timestamp(6)
  createdBy                String?      @db.Uuid
  updatedBy                String?      @db.Uuid
  fcmToken                 String?
  socialId                 String?
  countryData              Country?     @relation(fields: [countryId], references: [id])
  UserDetail               UserDetail[]
  userData                 OtpVerify[]
  brandData                BrandType?     @relation(fields: [brandTypeId], references: [id])
  socialMediaPlatforms     SocialMediaPlatform[]
  subCategories            UserSubCategory[]
  cityData                 City?        @relation(fields: [cityId], references: [id])
  stateData                State?       @relation(fields: [stateId], references: [id])
  groupUserData            GroupUsers[]
  
  groupUsersCreated        GroupUsersList[] @relation("AdminUser")
  groupUsersInvited        GroupUsersList[] @relation("InvitedUser")
  influencerOrderData      Orders[]         @relation("influencerOrderInfo")
  businessOrderData        Orders[]         @relation("businessOrderInfo")
  userEarningData          Earnings[]       @relation("userEarningInfo")
  businessPaymentData      Earnings[]       @relation("businessPaymentInfo")
}

model Category {
  id                       String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                     String?       @db.VarChar
  image                    String?       @db.VarChar
  status                   Boolean       @default(true)
  createsAt                DateTime?     @default(now()) @db.Timestamp(6)
  updatedAt                DateTime?     @default(now()) @db.Timestamp(6)
  createdBy                String?       @db.Uuid
  updatedBy                String?       @db.Uuid
  categoryInformation      SubCategory[]
  categoryInfo             UserSubCategory[]
}

model Country {
  id                       String         @id@default(dbgenerated("gen_random_uuid()"))@db.Uuid
  name                     String?        @db.VarChar
  countryCode              String?        @unique@db.VarChar
  status                   Boolean        @default(true)
  createsAt                DateTime?      @default(now()) @db.Timestamp(6)
  updatedAt                DateTime?      @default(now()) @db.Timestamp(6)
  countryData              User[]
  countryKey               State[]
}

model State {
  id                       String        @id@default(dbgenerated("gen_random_uuid()"))@db.Uuid
  name                     String?       @db.VarChar
  status                   Boolean       @default(true)
  createsAt                DateTime?     @default(now()) @db.Timestamp(6)
  updatedAt                DateTime?     @default(now()) @db.Timestamp(6)
  countryId                String?       @db.Uuid
  countryKey               Country?      @relation(fields: [countryId], references: [id])
  stateKey                 City[]
  stateData                User[]
}

model City {
  id                       String         @id@default(dbgenerated("gen_random_uuid()"))@db.Uuid
  name                     String?        @db.VarChar
  status                   Boolean        @default(true)
  createsAt                DateTime?      @default(now()) @db.Timestamp(6)
  updatedAt                DateTime?      @default(now()) @db.Timestamp(6)
  stateId                  String?        @db.Uuid
  stateKey                 State?         @relation(fields: [stateId], references: [id])
  cityData                 User[]
}


model SubCategory {
  id                     String         @id@default(dbgenerated("gen_random_uuid()"))@db.Uuid
  categoryId             String?        @db.Uuid
  name                   String?        @db.VarChar
  image                  String?        @db.VarChar
  status                 Boolean        @default(true)
  createdAt              DateTime?      @default(now())@db.Timestamp(6)
  updatedAt              DateTime?      @default(now())@db.Timestamp(6)
  createdBy              String?        @db.Uuid
  updatedBy              String?        @db.Uuid
  categoryInformation    Category?      @relation(fields: [categoryId], references: [id])
  users                  UserSubCategory[] 
}

model UserDetail {
  id                     String         @id@default(dbgenerated("gen_random_uuid()"))@db.Uuid
  userId                 String?        @db.Uuid
  key                    String?        @db.VarChar
  Value                  String?        @db.VarChar
  createsAt              DateTime?      @default(now())@db.Timestamp(6)
  updatedAt              DateTime?      @default(now())@db.Timestamp(6)
  User                   User?          @relation(fields: [userId], references: [id])
}

model OtpVerify {
  id                     String         @id@default(dbgenerated("gen_random_uuid()"))@db.Uuid
  emailAddress           String         @db.VarChar
  otp                    String         @db.VarChar
  expireAt               DateTime?
  verified               Boolean        @default(false)
  createdAt              DateTime       @default(now())@db.Timestamp(6)
  updatedAt              DateTime       
  otpType                OtpType?
  countMail              Int?           @default(0)
  userData               User?          @relation( fields: [emailAddress], references: [emailAddress], onDelete: Cascade ) 
}

model BrandType {
  id                       String         @id@default(dbgenerated("gen_random_uuid()"))@db.Uuid
  name                     String?        @db.VarChar
  status                   Boolean        @default(true)
  createsAt                DateTime?      @default(now()) @db.Timestamp(6)
  updatedAt                DateTime?      @updatedAt @db.Timestamp(6)
  brandData                User[]        
}

model SocialMediaPlatform {
  id                       String         @id@default(dbgenerated("gen_random_uuid()"))@db.Uuid
  image                    String?        
  userId                   String         @db.Uuid
  platform                 Platform?  
  userName                 String?        @db.VarChar
  followerCount            Int?        
  engagementRate           Int?        
  averageLikes             Int?        
  averageComments          Int?        
  averageShares            Int?        
  price                    Decimal?       @db.Decimal
  status                   Boolean        @default(true)
  createsAt                DateTime?      @default(now()) @db.Timestamp(6)
  updatedAt                DateTime?      @default(now()) @db.Timestamp(6) 
  user             User?          @relation(fields: [userId], references: [id]) 
  @@unique([userId, platform])
}

model UserSubCategory {
  id            String          @default(dbgenerated("gen_random_uuid()"))@db.Uuid
  userId        String          @db.Uuid
  subCategoryId String          @db.Uuid
  categoryId    String?         @db.Uuid
  user          User            @relation(fields: [userId], references: [id])
  subCategory   SubCategory     @relation(fields: [subCategoryId], references: [id])
  categoryInfo  Category?        @relation(fields: [categoryId], references: [id])

  @@id([userId, subCategoryId]) 
}

model Group {
  id                       String         @id@default(dbgenerated("gen_random_uuid()"))@db.Uuid
  groupImage               String?        @db.VarChar
  groupName                String?        @db.VarChar
  groupBio                 String?        @db.VarChar
  subCategoryId            String[]
  socialMediaPlatform      Platform[]   
  Visibility               VisibilityType?
  status                   Boolean        @default(true)
  createsAt                DateTime?      @default(now()) @db.Timestamp(6)
  updatedAt                DateTime?      @default(now()) @db.Timestamp(6) 
  groupData                GroupUsers[]
  groupUsersList           GroupUsersList[] @relation("GroupToGroupUsersList")
  groupOrderData           Orders[]
  groupEarningData         Earnings[]
}

model GroupUsers {
  id                       String         @id@default(dbgenerated("gen_random_uuid()"))@db.Uuid
  userId                   String         @db.Uuid
  groupId                  String         @db.Uuid
  invitedUserId            String[]
  status                   Boolean        @default(true)
  createsAt                DateTime?      @default(now()) @db.Timestamp(6)
  updatedAt                DateTime?      @default(now()) @db.Timestamp(6) 
  groupData                Group?         @relation(fields: [groupId], references: [id])
  groupUserData            User?          @relation(fields: [userId], references: [id])
  groupUsersList   GroupUsersList[] @relation("GroupUsersToGroupUsersList")
}

model GroupUsersList {
  id                  String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  groupId             String              @db.Uuid
  groupUserId         String              @db.Uuid
  adminUserId         String              @db.Uuid
  invitedUserId       String              @db.Uuid
  status              Boolean             @default(true)
  requestAccept       RequestStatus       @default(PENDING)      
  createdAt           DateTime?           @default(now()) @db.Timestamp(6)
  updatedAt           DateTime?           @default(now()) @db.Timestamp(6)

  group               Group                @relation("GroupToGroupUsersList", fields: [groupId], references: [id])
  groupUser           GroupUsers           @relation("GroupUsersToGroupUsersList", fields: [groupUserId], references: [id])
  adminUser           User                 @relation("AdminUser", fields: [adminUserId], references: [id])
  invitedUser         User                 @relation("InvitedUser", fields: [invitedUserId], references: [id])
}


model AppSetting {
  id                      String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title                   String          @db.VarChar
  slug                    String          @unique @db.VarChar
  value                   String          @db.VarChar
  createdAt               DateTime        @default(now()) @db.Timestamp(6)
  updatedAt               DateTime        @default(now()) @db.Timestamp(6)
}

model Badges {
  id                      String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type                    String?         @unique @db.VarChar
  title                   String?         @db.VarChar
  image                   String?         @db.VarChar
  status                  Boolean         @default(true)
  createdAt               DateTime        @default(now()) @db.Timestamp(6)
  updatedAt               DateTime        @default(now()) @db.Timestamp(6)
}

model Orders {
  id                      String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  groupId                 String?         @db.Uuid
  influencerId            String?         @db.Uuid
  businessId              String          @db.Uuid
  title                   String?         @db.VarChar
  description             String?         @db.VarChar
  completionDate          DateTime        @default(now())
  attachment              String?         @db.VarChar
  status                  OfferStatus     @default(PENDING)
  transactionId           String?         @db.VarChar
  totalAmount             Decimal?        @db.Decimal
  discountAmount          Decimal?        @db.Decimal
  finalAmount             Decimal?        @db.Decimal
  paymentStatus           PaymentStatus   @default(PENDING)
  submittedDescription    String?         @db.VarChar
  socialMediaLink         String?         @db.VarChar
  mediaType               Int?
  createdAt               DateTime?       @default(now()) @db.Timestamp(6)
  updatedAt               DateTime?       @default(now()) @db.Timestamp(6)

  orderData               Earnings[]
  groupOrderData          Group?          @relation(fields: [groupId], references: [id])
  influencerOrderData     User?           @relation("influencerOrderInfo", fields: [influencerId], references: [id])
  businessOrderData       User?            @relation("businessOrderInfo", fields: [businessId], references: [id])
  mediaOrderData          Media[]         @relation("mediaOrderInfo")
}

model Media {
  id         String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  orderId    String      @db.Uuid
  mediaLink  String?      @db.VarChar
  reason     String?      @db.VarChar
  status     RequestStatus @default(PENDING)
  createdAt  DateTime?    @default(now()) @db.Timestamp(6)
  updatedAt  DateTime?    @default(now()) @db.Timestamp(6)

  OrderData  Orders?      @relation("mediaOrderInfo", fields: [orderId], references: [id])
}


model Earnings {
  id                      String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  orederId                String?         @db.Uuid
  groupId                 String?         @db.Uuid
  userId                  String?         @db.Uuid
  businessId              String          @db.Uuid
  amount                  Decimal?        @db.Decimal
  earningAmount           Decimal?        @db.Decimal
  paymentStatus           PaymentStatus   
  date                    DateTime        @default(now())
  createdAt               DateTime?       @default(now()) @db.Timestamp(6)
  updatedAt               DateTime?       @default(now()) @db.Timestamp(6)
  
  orderData               Orders?         @relation(fields: [orederId], references: [id])
  groupEarningData        Group?          @relation(fields: [groupId], references: [id])
  userEarningData         User?           @relation("userEarningInfo", fields: [userId], references: [id])
  businessPaymentData     User?           @relation("businessPaymentInfo", fields: [businessId], references: [id])
}



enum Role {
  BUSINESS
  INFLUENCER
  ADMIN
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum Platform {
  INSTAGRAM
  FACEBOOK
  TWITTER
  YOUTUBE
}

enum InfluencerType {
  PRO 
  NORMAL
}

enum LoginType {
  GOOGLE 
  APPLE
  NONE
}

enum AvailabilityType {
  ONLINE
  OFFLINE
}

enum VisibilityType {
  PUBLIC
  PRIVATE
}

enum OtpType {
  SIGNUP
  RESETPASS
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum OfferStatus {
  PENDING
  ACCEPTED
  CANCELED
  ACTIVATED
  ORDERSUBMITTED
  COMPLETED
  DECLINED
}

enum PaymentStatus {
  PENDING
  COMPLETED
}