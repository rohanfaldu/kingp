generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type                     Role?        @default(BUSINESS)
  name                     String?      @db.VarChar
  emailAddress             String       @unique @db.VarChar
  password                 String       @db.VarChar
  countryId                String?      @db.Uuid
  brandTypeId              String?      @db.Uuid
  referralCode             String?      @db.VarChar
  userImage                String?      @db.VarChar
  applicationLink          String?      @db.VarChar
  description              String?      @db.VarChar
  contactPersonName        String?      @db.VarChar
  contactPersonPhoneNumber String?      @db.VarChar
  gstNumber                String?      @db.VarChar
  status                   Boolean?     @default(false)
  workEmail                String?      @db.VarChar
  socialMediaPlatform      String[]     @db.VarChar
  birthDate                DateTime?
  gender                   Gender?
  cityId                   String?      @db.Uuid
  stateId                  String?      @db.Uuid
  socialMediaLink          String?      @db.VarChar
  sampleWorkLink           String?      @db.VarChar
  aboutYou                 String?      @db.VarChar
  bio                      String?      @db.VarChar
  ratings                  Int? 
  influencerType           InfluencerType?
  viewCount                Int?         @default(0)
  createsAt                DateTime?    @default(now()) @db.Timestamp(6)
  updatedAt                DateTime?    @default(now()) @updatedAt @db.Timestamp(6)
  createdBy                String?      @db.Uuid
  updatedBy                String?      @db.Uuid
  fcmToken                 String?
  CountryData              Country?     @relation(fields: [countryId], references: [id])
  UserDetail               UserDetail[]
  userData                 PaswordReset[]
  brandData                BrandType?     @relation(fields: [brandTypeId], references: [id])
  socialMediaPlatforms             SocialMediaPlatform[]
  subCategories            UserSubCategory[]
  CityData   City?    @relation(fields: [cityId], references: [id])
  StateData  State?   @relation(fields: [stateId], references: [id])
}

model Category {
  id                       String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                     String?       @db.VarChar
  image                    String?       @db.VarChar
  status                   Boolean       @default(true)
  createsAt                DateTime?     @default(now()) @db.Timestamp(6)
  updatedAt                DateTime?     @default(now()) @db.Timestamp(6)
  createdBy                String?       @db.Uuid
  updatedBy                String?       @db.Uuid
  categoryInformation      SubCategory[]
}

model Country {
  id                       String         @id@default(dbgenerated("gen_random_uuid()"))@db.Uuid
  name                     String?        @db.VarChar
  countryCode              String?        @unique@db.VarChar
  status                   Boolean        @default(true)
  createsAt                DateTime?      @default(now()) @db.Timestamp(6)
  updatedAt                DateTime?      @default(now()) @db.Timestamp(6)
  CountryData              User[]
  countryKey               State[]
}

model State {
  id                       String        @id@default(dbgenerated("gen_random_uuid()"))@db.Uuid
  name                     String?       @db.VarChar
  status                   Boolean       @default(true)
  createsAt                DateTime?     @default(now()) @db.Timestamp(6)
  updatedAt                DateTime?     @default(now()) @db.Timestamp(6)
  countryId                String?       @db.Uuid
  countryKey               Country?      @relation(fields: [countryId], references: [id])
  stateKey                 City[]
  StateData                User[]
}

model City {
  id                       String         @id@default(dbgenerated("gen_random_uuid()"))@db.Uuid
  name                     String?        @db.VarChar
  status                   Boolean        @default(true)
  createsAt                DateTime?      @default(now()) @db.Timestamp(6)
  updatedAt                DateTime?      @default(now()) @db.Timestamp(6)
  stateId                  String?        @db.Uuid
  stateKey                 State?         @relation(fields: [stateId], references: [id])
  CityData                 User[]
}


model SubCategory {
  id                     String         @id@default(dbgenerated("gen_random_uuid()"))@db.Uuid
  categoryId             String?        @db.Uuid
  name                   String?        @db.VarChar
  image                  String?        @db.VarChar
  status                 Boolean        @default(true)
  createdAt              DateTime?      @default(now())@db.Timestamp(6)
  updatedAt              DateTime?      @default(now())@db.Timestamp(6)
  createdBy              String?        @db.Uuid
  updatedBy              String?        @db.Uuid
  categoryInformation    Category?      @relation(fields: [categoryId], references: [id])
  users                  UserSubCategory[] 
}

model UserDetail {
  id                     String         @id@default(dbgenerated("gen_random_uuid()"))@db.Uuid
  userId                 String?        @db.Uuid
  key                    String?        @db.VarChar
  Value                  String?        @db.VarChar
  createsAt              DateTime?      @default(now())@db.Timestamp(6)
  updatedAt              DateTime?      @default(now())@db.Timestamp(6)
  User                   User?          @relation(fields: [userId], references: [id])
}

model PaswordReset {
  id                     String         @id@default(dbgenerated("gen_random_uuid()"))@db.Uuid
  emailAddress           String         @db.VarChar
  otp                    String         @db.VarChar
  expireAt               DateTime?
  verified               Boolean        @default(false)
  createdAt              DateTime       @default(now())@db.Timestamp(6)
  updatedAt              DateTime       
  userData               User?          @relation( fields: [emailAddress], references: [emailAddress], onDelete: Cascade ) 
}

model BrandType {
  id                       String         @id@default(dbgenerated("gen_random_uuid()"))@db.Uuid
  name                     String?        @db.VarChar
  status                   Boolean        @default(true)
  createsAt                DateTime?      @default(now()) @db.Timestamp(6)
  updatedAt                DateTime?      @default(now()) @db.Timestamp(6) 
  brandData                User[]        
}

model SocialMediaPlatform {
  id                       String         @id@default(dbgenerated("gen_random_uuid()"))@db.Uuid
  image                    String?        
  userId                   String         @db.Uuid
  platform                 Platform?  
  userName                 String?        @db.VarChar
  followerCount            Int?        
  engagementRate           Int?        
  averageLikes             Int?        
  averageComments          Int?        
  averageShares            Int?        
  price                    Decimal?       @db.Decimal
  status                   Boolean        @default(true)
  createsAt                DateTime?      @default(now()) @db.Timestamp(6)
  updatedAt                DateTime?      @default(now()) @db.Timestamp(6) 
  user             User?          @relation(fields: [userId], references: [id]) 
  @@unique([userId, platform])
}

model UserSubCategory {
  id            String         @default(dbgenerated("gen_random_uuid()"))@db.Uuid
  userId        String          @db.Uuid
  subCategoryId String          @db.Uuid
  user          User         @relation(fields: [userId], references: [id])
  subCategory   SubCategory  @relation(fields: [subCategoryId], references: [id])
  @@id([userId, subCategoryId]) 
}

enum Role {
  BUSINESS
  INFLUENCER
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum Platform {
  INSTAGRAM
  FACEBOOK
  TWITTER
  YOUTUBE
}

enum InfluencerType {
  PRO 
  NORMAL
}